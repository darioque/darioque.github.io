{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "Sistema de Gestión de Tareas - API Flask",
		"description": "Colección completa para probar la API REST del Sistema de Gestión de Tareas.\n\n## 🚀 Funcionalidades:\n- Registro de usuarios con contraseñas hasheadas\n- Autenticación segura con sesiones\n- Gestión de tareas (página de bienvenida)\n- Manejo de errores robusto\n\n## 🔧 Instrucciones:\n1. Asegúrate de que el servidor esté ejecutándose: `python servidor.py`\n2. El servidor debe estar en: http://localhost:5000\n3. Ejecuta las peticiones en orden para probar el flujo completo\n4. Las cookies se manejan automáticamente\n\n## 📋 Orden recomendado:\n1. GET Página Principal\n2. POST Registro Usuario\n3. POST Login\n4. GET Tareas (requiere login)\n5. GET Listar Usuarios\n6. POST Logout\n7. Probar casos de error\n\n---\nDesarrollado con Flask + SQLite + Werkzeug Security",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345"
	},
	"item": [
		{
			"name": "🏠 Página Principal",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Obtiene la página principal con documentación de la API.\n\n**Respuesta esperada:** 200 OK\n**Contenido:** Página HTML con documentación completa"
			},
			"response": [
				{
					"name": "Página Principal - Exitosa",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						}
					],
					"cookie": [],
					"body": "<!DOCTYPE html>\n<html>...</html>"
				}
			]
		},
		{
			"name": "👤 Registro de Usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has mensaje\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('mensaje');",
							"    pm.expect(jsonData).to.have.property('usuario');",
							"});",
							"",
							"pm.test(\"Usuario registrado correctamente\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.mensaje).to.include('exitosamente');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"usuario\": \"{{test_usuario}}\",\n    \"contraseña\": \"{{test_password}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/registro",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"registro"
					]
				},
				"description": "Registra un nuevo usuario en el sistema.\n\n**Cuerpo requerido:**\n```json\n{\n    \"usuario\": \"nombre_usuario\",\n    \"contraseña\": \"mi_contraseña\"\n}\n```\n\n**Validaciones:**\n- Usuario mínimo 3 caracteres\n- Contraseña mínimo 4 caracteres\n- Usuario único (no duplicados)\n\n**Respuesta exitosa:** 201 Created\n**Respuesta error:** 400 Bad Request / 409 Conflict"
			},
			"response": [
				{
					"name": "Registro Exitoso",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usuario\": \"testuser\",\n    \"contraseña\": \"1234\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/registro",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"registro"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"mensaje\": \"Usuario registrado exitosamente\",\n    \"usuario\": \"testuser\",\n    \"fecha_registro\": \"2024-01-01T12:00:00.123456\"\n}"
				},
				{
					"name": "Usuario Duplicado",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usuario\": \"testuser\",\n    \"contraseña\": \"1234\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/registro",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"registro"
							]
						}
					},
					"status": "Conflict",
					"code": 409,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Usuario existente\",\n    \"mensaje\": \"El usuario \\\"testuser\\\" ya está registrado\"\n}"
				}
			]
		},
		{
			"name": "🔐 Iniciar Sesión",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has mensaje\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('mensaje');",
							"    pm.expect(jsonData).to.have.property('usuario');",
							"});",
							"",
							"pm.test(\"Login exitoso\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.mensaje).to.include('exitoso');",
							"});",
							"",
							"pm.test(\"Cookies are set\", function () {",
							"    pm.expect(pm.cookies.has('session')).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"usuario\": \"{{test_usuario}}\",\n    \"contraseña\": \"{{test_password}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Inicia sesión con credenciales de usuario.\n\n**Cuerpo requerido:**\n```json\n{\n    \"usuario\": \"nombre_usuario\",\n    \"contraseña\": \"mi_contraseña\"\n}\n```\n\n**Proceso:**\n1. Verifica que el usuario existe\n2. Compara contraseña con hash almacenado\n3. Crea sesión segura\n4. Establece cookies de sesión\n\n**Respuesta exitosa:** 200 OK\n**Respuesta error:** 401 Unauthorized"
			},
			"response": [
				{
					"name": "Login Exitoso",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usuario\": \"testuser\",\n    \"contraseña\": \"1234\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Set-Cookie",
							"value": "session=eyJ1c2VyX2lkIjoxLCJ1c3VhcmlvIjoidGVzdHVzZXIifQ.ZXhhbXBsZQ.signature; HttpOnly; Path=/"
						}
					],
					"cookie": [],
					"body": "{\n    \"mensaje\": \"Inicio de sesión exitoso\",\n    \"usuario\": \"testuser\",\n    \"fecha_login\": \"2024-01-01T12:05:00.123456\"\n}"
				},
				{
					"name": "Credenciales Inválidas",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usuario\": \"testuser\",\n    \"contraseña\": \"password_incorrecto\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Credenciales inválidas\",\n    \"mensaje\": \"Usuario o contraseña incorrectos\"\n}"
				}
			]
		},
		{
			"name": "📋 Página de Tareas (Autenticado)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is HTML\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
							"});",
							"",
							"pm.test(\"HTML contains welcome message\", function () {",
							"    pm.expect(pm.response.text()).to.include('Bienvenido');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/tareas",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tareas"
					]
				},
				"description": "Accede a la página de bienvenida de tareas (requiere autenticación).\n\n**Requisitos:**\n- Debe haber iniciado sesión previamente\n- Cookies de sesión válidas\n\n**Respuesta exitosa:** 200 OK - Página HTML de bienvenida\n**Respuesta error:** 401 Unauthorized - No autenticado\n\n**⚠️ Importante:** Esta petición debe ejecutarse DESPUÉS del login para mantener la sesión."
			},
			"response": [
				{
					"name": "Página de Tareas - Autenticado",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tareas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tareas"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						}
					],
					"cookie": [],
					"body": "<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <title>Mis Tareas</title>\n</head>\n<body>\n    <h1>🎉 ¡Bienvenido!</h1>\n    <p>Usuario: testuser</p>\n</body>\n</html>"
				}
			]
		},
		{
			"name": "👥 Listar Usuarios (Debug)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has usuarios array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('usuarios');",
							"    pm.expect(jsonData).to.have.property('total');",
							"    pm.expect(jsonData.usuarios).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Total matches array length\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.total).to.equal(jsonData.usuarios.length);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/usuarios",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"usuarios"
					]
				},
				"description": "Lista todos los usuarios registrados en el sistema (endpoint de debugging).\n\n**Propósito:** Verificar que los usuarios se están registrando correctamente\n\n**Respuesta:**\n```json\n{\n    \"usuarios\": [\n        {\n            \"id\": 1,\n            \"usuario\": \"testuser\",\n            \"fecha_registro\": \"2024-01-01 12:00:00\"\n        }\n    ],\n    \"total\": 1\n}\n```\n\n**Nota:** Las contraseñas NO se incluyen por seguridad."
			},
			"response": [
				{
					"name": "Lista de Usuarios",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/usuarios",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"usuarios\": [\n        {\n            \"id\": 1,\n            \"usuario\": \"testuser\",\n            \"fecha_registro\": \"2024-01-01 12:00:00\"\n        }\n    ],\n    \"total\": 1\n}"
				}
			]
		},
		{
			"name": "🚪 Cerrar Sesión",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has mensaje\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('mensaje');",
							"});",
							"",
							"pm.test(\"Logout exitoso\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.mensaje).to.include('exitosamente');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"logout"
					]
				},
				"description": "Cierra la sesión del usuario actual.\n\n**Proceso:**\n1. Limpia la sesión del servidor\n2. Invalida las cookies de sesión\n3. El usuario ya no puede acceder a rutas protegidas\n\n**Respuesta:** 200 OK\n\n**Después del logout:** Cualquier intento de acceder a `/tareas` resultará en 401 Unauthorized."
			},
			"response": [
				{
					"name": "Logout Exitoso",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"mensaje\": \"Sesión cerrada exitosamente\"\n}"
				}
			]
		},
		{
			"name": "❌ Acceso Sin Autenticación (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData).to.have.property('mensaje');",
							"});",
							"",
							"pm.test(\"Error is unauthorized\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include('autorizado');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/tareas",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tareas"
					]
				},
				"description": "Intenta acceder a la página de tareas sin estar autenticado.\n\n**Propósito:** Verificar que la autenticación funciona correctamente\n\n**Resultado esperado:** 401 Unauthorized\n\n**⚠️ Ejecutar esta petición:** \n- ANTES del login, o\n- DESPUÉS del logout\n\nPara verificar que la protección funciona."
			},
			"response": [
				{
					"name": "Error 401 - No Autorizado",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tareas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tareas"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"No autorizado\",\n    \"mensaje\": \"Debe iniciar sesión para acceder a las tareas\"\n}"
				}
			]
		},
		{
			"name": "❌ Datos Incompletos (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData).to.have.property('mensaje');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"usuario\": \"testuser\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/registro",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"registro"
					]
				},
				"description": "Intenta registrar un usuario con datos incompletos.\n\n**Propósito:** Verificar validaciones de entrada\n\n**Cuerpo enviado:** Solo usuario, falta contraseña\n\n**Resultado esperado:** 400 Bad Request\n\n**Validaciones que se prueban:**\n- Campos requeridos\n- Formato JSON válido\n- Datos completos"
			},
			"response": [
				{
					"name": "Error 400 - Datos Incompletos",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usuario\": \"testuser\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/registro",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"registro"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Datos incompletos\",\n    \"mensaje\": \"Se requieren los campos: usuario y contraseña\"\n}"
				}
			]
		},
		{
			"name": "❌ Endpoint No Encontrado (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData).to.have.property('mensaje');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/endpoint-inexistente",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"endpoint-inexistente"
					]
				},
				"description": "Intenta acceder a un endpoint que no existe.\n\n**Propósito:** Verificar manejo de errores 404\n\n**Resultado esperado:** 404 Not Found\n\n**Demuestra:** Que la API maneja correctamente rutas no definidas."
			},
			"response": [
				{
					"name": "Error 404 - No Encontrado",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/endpoint-inexistente",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"endpoint-inexistente"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Endpoint no encontrado\",\n    \"mensaje\": \"La ruta solicitada no existe\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Generar usuario único para pruebas",
					"if (!pm.globals.get('test_usuario')) {",
					"    const timestamp = Date.now();",
					"    pm.globals.set('test_usuario', `testuser_${timestamp}`);",
					"    pm.globals.set('test_password', 'test1234');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log de respuesta para debugging",
					"console.log('Response Status:', pm.response.code);",
					"console.log('Response Time:', pm.response.responseTime + 'ms');",
					"",
					"// Validación general de estructura de respuesta JSON",
					"if (pm.response.headers.get('Content-Type')?.includes('application/json')) {",
					"    pm.test('Response is valid JSON', function () {",
					"        pm.response.to.be.json;",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string",
			"description": "URL base del servidor Flask"
		},
		{
			"key": "test_usuario",
			"value": "testuser_{{$timestamp}}",
			"type": "string",
			"description": "Usuario de prueba (se genera automáticamente)"
		},
		{
			"key": "test_password",
			"value": "test1234",
			"type": "string",
			"description": "Contraseña de prueba"
		}
	]
}